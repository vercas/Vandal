.TH TICKIT 7
.SH NAME
tickit \- Terminal Interface Construction KIT
.SH DESCRIPTION
\fBtickit\fP is a library for building full-screen interactive programs that use a terminal interface. There are two levels of abstraction that a program might use the library via - a higher-level more abstracted system involving independent regions of the screen called "windows", or a lower-level system directly targetted at the actual terminal instance.
.SS "Window Level"
At the higher level of abstraction, a program creates a heirarchial tree of "windows", each an instance of the \fBTickitWindow\fP type. These act to divide the screen area into independent regions of interest, able to receive input events such as keyboard or mouse interactions, and render content to be displayed within its area.
.PP
A typical program using this model would start by creating the underlying \fBTickitTerm\fP instance to represent the terminal by calling \fBtickit_term_new\fP(3), then create a root window on it by calling \fBtickit_window_new_root\fP(3). This root window can then be sub-divided into regions of interest by calling \fBtickit_window_new\fP(3) to build a tree of windows. Window can then have some event handlers attached by calling \fBtickit_window_bind_event\fP(3) - each window will need to handle the \fBTICKIT_EV_EXPOSE\fP event, but might also wish to handle other kinds like geometry change for dynamic resizing, or keyboard or mouse to react to user input. Finally, once the intial window tree is created, the program would enter its main event loop; see the \fBEVENT LOOP\fP section below.
.SS "Terminal Level"
As an alternative to working at the level of windows, a program can operate on a lower level of abstraction by interacting directly with the \fBTickitTerm\fP instance. Operating at this level, it can use \fBtickit_term_bind_event\fP(3) to attach event handlers on the terminal instance itself in order to react to resize or input events. It can arrange for output to be drawn either by directly using the drawing functions on the terminal instance itself, or by constructing a \fBTickitRenderBuffer\fP instance to contain content, and flushing that to the terminal by calling \fBtickit_renderbuffer_flush_to_term\fP(3). As with the window level case, such a program will still need to use a main event loop; see below.
.SH "EVENT LOOP"
Once a program has set up its initial objects and event handlers, it must then run the main event loop in order to react to input events and generate output. A later version of \fIlibtickit\fP should provide better support for doing this, but at the current version this requires a certain amount of boilerplate code. This is explained here.
.PP
The simplest form of core of the event loop is a \fBwhile\fP loop that calls an \fBtickit_term_input_wait\fP function on the terminal, which will block awaiting for user input such as keyboard, mouse or resize interactions. If the windowing later is used, then \fBtickit_window_flush\fP(3) should be called before every blocking call to wait for input, so that pending damage can be flushed to the terminal, keeping the output up to date.
.sp
.EX
  while(1) {
    tickit_window_flush(rootwin);
    tickit_term_input_wait_msec(term, -1);
  }
.EE
.sp
It is a good idea to install a signal handler for \fBSIGINT\fP so that the terminal can be cleanly shut down on exit, restoring any alterations to altscreen, cursor settings, and so on that the application may have made.
.sp
.EX
  static bool still_running = true;
  static void sigint(int sig) { still_running = false; }
  ...

  while(still_running) {
    tickit_window_flush(rootwin);
    tickit_term_input_wait_msec(term, -1);
  }

  tickit_window_close(rootwin);
  tickit_window_unref(rootwin);
  tickit_term_unref(term);
.EE
.sp
A more complex program that wanted to perform other IO or timer operations at the same time, would instead make use of \fBtickit_term_input_readable\fP(3) and the \fBtickit_term_input_check_timeout\fP functions to keep the terminal IO working alongside other activity.
.SH "COMMON TYPES"
The \fIflags\fP argument to the various \fB_bind_event\fP() functions should be zero, or a bitmask of the following constants.
.sp
.EX
.B  typedef enum {
.BR  "  TICKIT_BIND_FIRST" ,
.BI "} " TickitBindFlags ;
.EE
.sp
.PP
\fBTICKIT_BIND_FIRST\fP indicates that this handler should be inserted at the start of the list, rather than the default position at the end.
.PP
Some API functions take or return the following enum type, to represent a tri-state extended boolean concept of true, false, or some third condition typically indicating a "don't care" or "unknown" state; the exact semantics will vary between specific uses and should be documented specifically.
.sp
.EX
.B  typedef enum {
.BR "  TICKIT_YES" " = 1,"
.BR "  TICKIT_NO" " = 0,"
.BR "  TICKIT_MAYBE" " = -1",
.BI "} " TickitMaybeBool ;
.EE
.SH "COMMON EVENTS"
Every object instance that supports events supports the following type of event, in addition to the specific ones listed for that kind of object:
.TP
.B TICKIT_EV_DESTROY
Invoked when the object instance is being destroyed. This will be the last time the application can use the stored \fIdata\fP argument; it may perform any resource reclaiming operations that are required at this time. The \fIinfo\fP pointer will be \fBNULL\fP.
.IP
Any event handlers for this event will be invoked in reverse order; the newest is run first and the oldest last.
.TP
.B TICKIT_EV_UNBIND
Invoked when the event handler is about to be removed, either because it was unbound individually, or because the object instance itself is being destroyed. In the former case, this event handler is invoked individually; in the latter case the entire list is invoked as normal and the \fBTICKIT_EV_DESTROY\fP flag will also be set.
.SH "SEE ALSO"
.BR tickit_window (7),
.BR tickit_term (7),
.BR tickit_pen (7),
.BR tickit_rect (7),
.BR tickit_rectset (7),
.BR tickit_renderbuffer (7),
.BR tickit_string_count (3)
